function status = runFASTForVisualization(templateFilenameVIZ, simulationFolder, OP_file_or_struct, FASTexe, varargin)
% Loop through simulations, looking for *.postmb files, if present, VIZ files will be generated based on the template provided
% and FAST will be rerun to generate VTK
%
% INPUTS:
%  - templateFilenameVIZ: path to a "VIZ" file used as template to create other visualization files. 
%  - simulationFolder:  folder where linearization files are present.
%  - OP_file_or_struct: 
%          path to a csv file that contains information about the Operating points see function readOperatingPoints for more.
%       OR structure with (depending on simulation) fields: RotorSpeed, {optional: WindSpeed, GeneratorTorque, BladePitch, TowerTopDispFA, Filename}
%  - FASTexe:       fullpath (relative or absolute) to an openfast executable
%
% OPTIONAL INPUTS:
%  - varargin is a set of ('key', value) pairs used to override values found in templateFilenameVIZ
%            Look at `opts` below for the different options, and default values.
%
% OUTPUTS:
%  - status: array of status for each simulation
%


% --- Optional arguments
OptsFields={'VTKLinModes','VTKModes','VTKLinScale','VTKLinTim','VTKLinTimes1'};
opts=struct();
% Default values
opts.VTKLinModes = NaN; % Number of modes to visualize (0 <= VTKLinModes <= NumModes)
opts.VTKModes    = NaN; % List of which VTKLinModes modes will be visualized (modes will be added sequentially from the last value entered)
opts.VTKLinScale = NaN; % Mode shape visualization scaling factor (exaggerates mode shapes: try 10 for ElastoDyn; 0.1 for BeamDyn)
opts.VTKLinTim   = NaN; % Switch to make one animation for all LinTimes together (VTKLinTim=1) or separate animations for each LinTimes (VTKLinTim=2)
opts.VTKLinTimes1= NaN; % If VTKLinTim=2, visualize modes at LinTimes(1) only? (if false, files will be generated at all LinTimes)
% Values input by users % NOTE: inputParser not available in Octave
if nargin >=5
    for iOpts = 1:length(OptsFields)
        i = find( strcmp( varargin, OptsFields{iOpts}) == 1);
        if ~isempty(i)
            opts.(OptsFields{iOpts}) = varargin{i + 1};
        end
    end
end


% Getting fullpath to FASTfilenames
[FASTfilenames] = getFullFilenamesOP(simulationFolder, OP_file_or_struct);

% Read VIZ template
paramVIZ = FAST2Matlab(templateFilenameVIZ,2);


% Loop through simulations, looking for *.postmb files, if present FAST will be rerun to generate VTK
VIZfilenames ={};
for iOP = 1:length(FASTfilenames)
    fst = FASTfilenames{iOP};
    [fdir, base,~] = fileparts(fst);
    fullbase = strrep(strrep([fdir '/'  base], '//','/'),'\','/');
    full_chkpFile      = [fullbase '.ModeShapeVTK.chkp']   ; % Generated by FAST
    full_chkpRoot      = [fullbase '.ModeShapeVTK']        ; % No control over this root
    chkpRoot           = [base     '.ModeShapeVTK']        ; % No control over this root
    postMBC            = [base     '.ModeShapeVTK.postmbc']; 
    full_postMBC       = [fullbase '.ModeShapeVTK.postmbc']; % <<< NOTE: name set and generated by getCampbellData
    full_ModesVizName  = [fullbase '.ModeShapeVTK.viz']    ; % We will create that file

    if exist(full_postMBC, 'file')
        VIZfilenames{end+1}= normpath(full_ModesVizName); % ...
        paramVIZ_mod = SetFASTPar(paramVIZ    ,'CheckpointRoot',normpath(full_chkpRoot));
        paramVIZ_mod = SetFASTPar(paramVIZ_mod,'MatlabFileName',normpath(full_postMBC ));
        % Override input file with user arguments
        for iField = 1:length(OptsFields)
            field=OptsFields{iField};
            if ~isnan(opts.(field))
                paramVIZ_mod = SetFASTPar(paramVIZ_mod,field,opts.(field));
            end
        end
        Matlab2FAST(paramVIZ_mod, templateFilenameVIZ, full_ModesVizName, 2); %contains 2 header lines
    end
end

if length(VIZfilenames)==0
    fprintf('Warning: no *ModeShapeVTK.postmbc files found\n');
else
    fprintf('Running visualization for %d files...\n',length(VIZfilenames));
    status = runFAST(VIZfilenames, FASTexe, 'flag','-VTKLin');
end
end

function s= normpath(s)
    if ispc()
        s = strrep(s,'/','\');
    else
        s = strrep(s,'\','/');
    end
end

